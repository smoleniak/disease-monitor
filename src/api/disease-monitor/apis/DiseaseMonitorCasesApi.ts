/* tslint:disable */
/* eslint-disable */
/**
 * Disease Monitor Api
 * Disease Monitor management for Web-In-Cloud system
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xsmoleniak@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DiseaseCaseEntry,
} from '../models';
import {
    DiseaseCaseEntryFromJSON,
    DiseaseCaseEntryToJSON,
} from '../models';

export interface GetDiseaseCaseEntriesRequest {
    regionId: string;
}

/**
 * DiseaseMonitorCasesApi - interface
 * 
 * @export
 * @interface DiseaseMonitorCasesApiInterface
 */
export interface DiseaseMonitorCasesApiInterface {
    /**
     * You get list of existing disease cases
     * @summary Provides the disease case entries
     * @param {string} regionId pass the id of the geographic region
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiseaseMonitorCasesApiInterface
     */
    getDiseaseCaseEntriesRaw(requestParameters: GetDiseaseCaseEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DiseaseCaseEntry>>>;

    /**
     * You get list of existing disease cases
     * Provides the disease case entries
     */
    getDiseaseCaseEntries(requestParameters: GetDiseaseCaseEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DiseaseCaseEntry>>;

}

/**
 * 
 */
export class DiseaseMonitorCasesApi extends runtime.BaseAPI implements DiseaseMonitorCasesApiInterface {

    /**
     * You get list of existing disease cases
     * Provides the disease case entries
     */
    async getDiseaseCaseEntriesRaw(requestParameters: GetDiseaseCaseEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DiseaseCaseEntry>>> {
        if (requestParameters.regionId === null || requestParameters.regionId === undefined) {
            throw new runtime.RequiredError('regionId','Required parameter requestParameters.regionId was null or undefined when calling getDiseaseCaseEntries.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/disease-monitor/{regionId}/entries`.replace(`{${"regionId"}}`, encodeURIComponent(String(requestParameters.regionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DiseaseCaseEntryFromJSON));
    }

    /**
     * You get list of existing disease cases
     * Provides the disease case entries
     */
    async getDiseaseCaseEntries(requestParameters: GetDiseaseCaseEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DiseaseCaseEntry>> {
        const response = await this.getDiseaseCaseEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
