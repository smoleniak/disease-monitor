/* tslint:disable */
/* eslint-disable */
/**
 * Disease Monitor Api
 * Disease Monitor management for Web-In-Cloud system
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xsmoleniak@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Disease } from './Disease';
import {
    DiseaseFromJSON,
    DiseaseFromJSONTyped,
    DiseaseToJSON,
} from './Disease';
import type { Patient } from './Patient';
import {
    PatientFromJSON,
    PatientFromJSONTyped,
    PatientToJSON,
} from './Patient';

/**
 * 
 * @export
 * @interface DiseaseCaseEntry
 */
export interface DiseaseCaseEntry {
    /**
     * Unique id of the disease case
     * @type {string}
     * @memberof DiseaseCaseEntry
     */
    id: string;
    /**
     * 
     * @type {Disease}
     * @memberof DiseaseCaseEntry
     */
    disease: Disease;
    /**
     * 
     * @type {Patient}
     * @memberof DiseaseCaseEntry
     */
    patient: Patient;
    /**
     * Geographic latitude
     * @type {number}
     * @memberof DiseaseCaseEntry
     */
    latitude: number;
    /**
     * Geographic longtitude
     * @type {number}
     * @memberof DiseaseCaseEntry
     */
    longtitude: number;
    /**
     * Reported time of the disease case.
     * @type {Date}
     * @memberof DiseaseCaseEntry
     */
    diseaseStart: Date;
    /**
     * Reported time of disease end.
     * @type {Date}
     * @memberof DiseaseCaseEntry
     */
    diseaseEnd?: Date;
}

/**
 * Check if a given object implements the DiseaseCaseEntry interface.
 */
export function instanceOfDiseaseCaseEntry(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "disease" in value;
    isInstance = isInstance && "patient" in value;
    isInstance = isInstance && "latitude" in value;
    isInstance = isInstance && "longtitude" in value;
    isInstance = isInstance && "diseaseStart" in value;

    return isInstance;
}

export function DiseaseCaseEntryFromJSON(json: any): DiseaseCaseEntry {
    return DiseaseCaseEntryFromJSONTyped(json, false);
}

export function DiseaseCaseEntryFromJSONTyped(json: any, ignoreDiscriminator: boolean): DiseaseCaseEntry {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'disease': DiseaseFromJSON(json['disease']),
        'patient': PatientFromJSON(json['patient']),
        'latitude': json['latitude'],
        'longtitude': json['longtitude'],
        'diseaseStart': (new Date(json['diseaseStart'])),
        'diseaseEnd': !exists(json, 'diseaseEnd') ? undefined : (new Date(json['diseaseEnd'])),
    };
}

export function DiseaseCaseEntryToJSON(value?: DiseaseCaseEntry | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'disease': DiseaseToJSON(value.disease),
        'patient': PatientToJSON(value.patient),
        'latitude': value.latitude,
        'longtitude': value.longtitude,
        'diseaseStart': (value.diseaseStart.toISOString()),
        'diseaseEnd': value.diseaseEnd === undefined ? undefined : (value.diseaseEnd.toISOString()),
    };
}

